enum Suit {
  hearts
  diamonds
  clubs
  spades
}
type Card {
  value: Int!
  suit: Int!
}
type Game {
  gameId: Int!
  deck: [Card]
  board: [Card]
  cardsUsed: [Card]
  winner: Boolean
  ended: Boolean
}
type GameResult {
  success: Boolean!
  game: Game
  msg: String
}
type Result {
  success: Boolean!
}
type Streak {
  winner: Boolean!
  length: Int!
}

type StreakResult {
  success: Boolean!
  streak: Streak
  msg: String
}
type Query {
  getStreak(sessionID: String): StreakResult
}

type Mutation {
  shuffle(sessionID: String): GameResult
  nextHand(sessionID: String, gameId: Int!): GameResult
  resetSession(sessionID: String): Result
}
